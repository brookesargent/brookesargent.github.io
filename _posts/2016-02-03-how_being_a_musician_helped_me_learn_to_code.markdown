---
layout: post
title: How Being a Musician Helped Me Learn to Code
date: 2016-02-03
categories:
tags: 
image: /assets/article_images/2016-02-03-how_being_a_musician_helped_me_learn_to_code/piano.jpg
comments: true
---
*Inspired by Code Newbie podcast [Episode 73 Coding Chef](http://www.codenewbie.org/podcast/coding-chef)*

The similarities between music and code are something I’ve been considering since the beginning of my coding journey. At the surface, it seems like the two subjects would have nothing in common. One is considered an art and one is considered a science, afterall. But as I dive deeper and deeper into code, I can’t help but think my musical background has actually given me a leg up in the realm of code.

I think the most obvious similarity here is that if you want to write good code or make great music, you have to practice a LOT. Fake it until you make it really isn’t feasible in either of these worlds. If you don’t practice and put in the work, not much is going to happen. Being a music major in college, where it’s not uncommon for people to spend 4-5 hours or more with their instrument each day, definitely prepped me for the dedication it takes to teach yourself to code. 

The parallel between music and code that make them both such enjoyable topics of study for me is the use of the left AND right sides of the brain. Code is obviously very logical in that you have to map out the logic of what you want your program to do and then match the correct language syntax with that logic to make it happen. Music is also logical but I don’t think that’s as obvious to non-musicians. Since music is labeled as an art, people often don’t realize that most music follows a fairly specific structure and form. You can’t just throw any notes on the page and see how they sound. The rhythms have to fit within the chosen meter and the melodies and harmonies have to fit within the chosen key. 

On the creative side of things, music is expressive. Listening to good music evokes emotion. Whether it makes you happy, sad, reflective, or any other host of things, you feel something. This is done through the use of dynamics and style. One piece of music could be played and interpreted in several different ways and each way could cause the listener to have a different emotional response. I find code to be pretty expressive too. A web developer plays a role quite similar to a composer, actually. And the audience at a concert isn’t much different than the users of the web. Essentially, both a composer and a developer want to create a response. The response from a user is typically a little more literal, I think. A call to action more than an emotional reaction, but a response nonetheless. Developers create this call to action and exercise their creativity when deciding how a website or app should look and how a user will interact with it. 

Finally, the way music and code are formatted and understood also have striking similarities. Remember earlier when I mentioned that music requires specific form and structure just like programming? Even the elements of their structures are pretty similar. For example, music and code are both very loop-based. That’s why programs that help you live code music like [Sonic Pi](http://sonic-pi.net/) work so well. As for how we understand these subjects, reading music and reading code are both like reading another language. Learning to simply read and understand them takes time and practice. The more you do it, the more fluent you will be. When I first started playing the clarinet in 6th grade, I had to read and understand the music before I was able to play anything. Sometimes I had to write the notes in ahead of time, but before I knew it, I was able to read music and play music at the same time. I even became a pretty decent sight-reader! It took me a bit to realize that reading code wasn’t much different than reading music. I got frustrated that I didn’t understand everything that was going on and sometimes looking at it just gave me a headache. I had to go through tutorials to understand the individual pieces before putting everything together and being able to read a big chunk. Even after the tutorials sometimes, I would understand a few lines but didn’t understand how those lines interacted with the other lines to make things happen. So I just kept plugging away at it. Now, reading code is one of the most useful ways for me to learn (especially if it’s commented!).

There are several other parallels here. Both music and code are iterative processes, there’s always something new to learn, etc. And I’m sure there are other relationships that I haven’t even thought of yet. What I’m thankful for is coming into programming from this other skill that I had mastered to an extent (not saying I can’t still improve as a musician) and making these connections. It gives me incredible perspective that I wouldn’t otherwise have and it keeps me motivated through the rough patches. If you’re a code newbie like me, I highly recommend sitting down to think of something you’re good at. What are you an expert in? What topic do your friends come to you with questions about? Start making comparisons between that thing and code. How did you get through challenges on your path to the other thing? And how can you adapt those experiences to further your code journey?
